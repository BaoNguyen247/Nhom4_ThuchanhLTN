
Nhom4_kt_bai1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000364  0800036c  0000136c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000364  08000364  0000136c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000364  08000364  0000136c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000364  0800036c  0000136c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000364  08000364  00001364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000368  08000368  00001368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000136c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800036c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800036c  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000032e  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000011e  00000000  00000000  000016ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  000017e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000033  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fcb  00000000  00000000  0000186b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000521  00000000  00000000  00002836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003e6f  00000000  00000000  00002d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00006bc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000080  00000000  00000000  00006c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00006c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800034c 	.word	0x0800034c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800034c 	.word	0x0800034c

080001d4 <delay>:
#include "STM32F401RE_H"
static void delay(int x)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	for(uint32_t i =0; i < x * 1000000; i++);
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	e002      	b.n	80001e8 <delay+0x14>
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	3301      	adds	r3, #1
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4a07      	ldr	r2, [pc, #28]	@ (8000208 <delay+0x34>)
 80001ec:	fb02 f303 	mul.w	r3, r2, r3
 80001f0:	461a      	mov	r2, r3
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d3f4      	bcc.n	80001e2 <delay+0xe>
}
 80001f8:	bf00      	nop
 80001fa:	bf00      	nop
 80001fc:	3714      	adds	r7, #20
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	000f4240 	.word	0x000f4240

0800020c <main>:

int dk = 0 ;
int main(void){
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	//Bat clock
	RCC->AHB1ENR |= 0x01 << 0;
 8000210:	4b23      	ldr	r3, [pc, #140]	@ (80002a0 <main+0x94>)
 8000212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000214:	4a22      	ldr	r2, [pc, #136]	@ (80002a0 <main+0x94>)
 8000216:	f043 0301 	orr.w	r3, r3, #1
 800021a:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= 0x01 << 2;
 800021c:	4b20      	ldr	r3, [pc, #128]	@ (80002a0 <main+0x94>)
 800021e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000220:	4a1f      	ldr	r2, [pc, #124]	@ (80002a0 <main+0x94>)
 8000222:	f043 0304 	orr.w	r3, r3, #4
 8000226:	6313      	str	r3, [r2, #48]	@ 0x30
	//PC13-Nut bam
	GPIOC->MODER |= ~(0x03 << 26);//input
 8000228:	4b1e      	ldr	r3, [pc, #120]	@ (80002a4 <main+0x98>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a1d      	ldr	r2, [pc, #116]	@ (80002a4 <main+0x98>)
 800022e:	f063 6340 	orn	r3, r3, #201326592	@ 0xc000000
 8000232:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR |= 0x01 <<26;
 8000234:	4b1b      	ldr	r3, [pc, #108]	@ (80002a4 <main+0x98>)
 8000236:	68db      	ldr	r3, [r3, #12]
 8000238:	4a1a      	ldr	r2, [pc, #104]	@ (80002a4 <main+0x98>)
 800023a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800023e:	60d3      	str	r3, [r2, #12]
	//PA5-led
	GPIOA->MODER |= 0x01 <<10;//output
 8000240:	4b19      	ldr	r3, [pc, #100]	@ (80002a8 <main+0x9c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a18      	ldr	r2, [pc, #96]	@ (80002a8 <main+0x9c>)
 8000246:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800024a:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER |= 0x00 << 5;// pp
 800024c:	4b16      	ldr	r3, [pc, #88]	@ (80002a8 <main+0x9c>)
 800024e:	4a16      	ldr	r2, [pc, #88]	@ (80002a8 <main+0x9c>)
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	6053      	str	r3, [r2, #4]
//	GPIOA->OTYPER |= 0x01 << 5;// od
//	GPIOA->OSPEEDR |= 0x01 << 10; // medium

	 while (1) {

	        if ((GPIOC->IDR & (0x01 << 13)) == 0) {
 8000254:	4b13      	ldr	r3, [pc, #76]	@ (80002a4 <main+0x98>)
 8000256:	691b      	ldr	r3, [r3, #16]
 8000258:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800025c:	2b00      	cmp	r3, #0
 800025e:	d10c      	bne.n	800027a <main+0x6e>
	        	dk = !dk;
 8000260:	4b12      	ldr	r3, [pc, #72]	@ (80002ac <main+0xa0>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2b00      	cmp	r3, #0
 8000266:	bf0c      	ite	eq
 8000268:	2301      	moveq	r3, #1
 800026a:	2300      	movne	r3, #0
 800026c:	b2db      	uxtb	r3, r3
 800026e:	461a      	mov	r2, r3
 8000270:	4b0e      	ldr	r3, [pc, #56]	@ (80002ac <main+0xa0>)
 8000272:	601a      	str	r2, [r3, #0]
	        	delay(2);
 8000274:	2002      	movs	r0, #2
 8000276:	f7ff ffad 	bl	80001d4 <delay>
	        }
	        if (dk) {
 800027a:	4b0c      	ldr	r3, [pc, #48]	@ (80002ac <main+0xa0>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d006      	beq.n	8000290 <main+0x84>
	            GPIOA->ODR |= (0x01 << 5);  // A5 cao
 8000282:	4b09      	ldr	r3, [pc, #36]	@ (80002a8 <main+0x9c>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	4a08      	ldr	r2, [pc, #32]	@ (80002a8 <main+0x9c>)
 8000288:	f043 0320 	orr.w	r3, r3, #32
 800028c:	6153      	str	r3, [r2, #20]
 800028e:	e7e1      	b.n	8000254 <main+0x48>
	        } else {
	            GPIOA->ODR &= ~(0x01 << 5); // A5 thap
 8000290:	4b05      	ldr	r3, [pc, #20]	@ (80002a8 <main+0x9c>)
 8000292:	695b      	ldr	r3, [r3, #20]
 8000294:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <main+0x9c>)
 8000296:	f023 0320 	bic.w	r3, r3, #32
 800029a:	6153      	str	r3, [r2, #20]
	        if ((GPIOC->IDR & (0x01 << 13)) == 0) {
 800029c:	e7da      	b.n	8000254 <main+0x48>
 800029e:	bf00      	nop
 80002a0:	40023800 	.word	0x40023800
 80002a4:	40020800 	.word	0x40020800
 80002a8:	40020000 	.word	0x40020000
 80002ac:	2000001c 	.word	0x2000001c

080002b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b0:	480d      	ldr	r0, [pc, #52]	@ (80002e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b8:	480c      	ldr	r0, [pc, #48]	@ (80002ec <LoopForever+0x6>)
  ldr r1, =_edata
 80002ba:	490d      	ldr	r1, [pc, #52]	@ (80002f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002bc:	4a0d      	ldr	r2, [pc, #52]	@ (80002f4 <LoopForever+0xe>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c0:	e002      	b.n	80002c8 <LoopCopyDataInit>

080002c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c6:	3304      	adds	r3, #4

080002c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002cc:	d3f9      	bcc.n	80002c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ce:	4a0a      	ldr	r2, [pc, #40]	@ (80002f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d0:	4c0a      	ldr	r4, [pc, #40]	@ (80002fc <LoopForever+0x16>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d4:	e001      	b.n	80002da <LoopFillZerobss>

080002d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d8:	3204      	adds	r2, #4

080002da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002dc:	d3fb      	bcc.n	80002d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002de:	f000 f811 	bl	8000304 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002e2:	f7ff ff93 	bl	800020c <main>

080002e6 <LoopForever>:

LoopForever:
  b LoopForever
 80002e6:	e7fe      	b.n	80002e6 <LoopForever>
  ldr   r0, =_estack
 80002e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f4:	0800036c 	.word	0x0800036c
  ldr r2, =_sbss
 80002f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002fc:	20000020 	.word	0x20000020

08000300 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000300:	e7fe      	b.n	8000300 <ADC_IRQHandler>
	...

08000304 <__libc_init_array>:
 8000304:	b570      	push	{r4, r5, r6, lr}
 8000306:	4d0d      	ldr	r5, [pc, #52]	@ (800033c <__libc_init_array+0x38>)
 8000308:	4c0d      	ldr	r4, [pc, #52]	@ (8000340 <__libc_init_array+0x3c>)
 800030a:	1b64      	subs	r4, r4, r5
 800030c:	10a4      	asrs	r4, r4, #2
 800030e:	2600      	movs	r6, #0
 8000310:	42a6      	cmp	r6, r4
 8000312:	d109      	bne.n	8000328 <__libc_init_array+0x24>
 8000314:	4d0b      	ldr	r5, [pc, #44]	@ (8000344 <__libc_init_array+0x40>)
 8000316:	4c0c      	ldr	r4, [pc, #48]	@ (8000348 <__libc_init_array+0x44>)
 8000318:	f000 f818 	bl	800034c <_init>
 800031c:	1b64      	subs	r4, r4, r5
 800031e:	10a4      	asrs	r4, r4, #2
 8000320:	2600      	movs	r6, #0
 8000322:	42a6      	cmp	r6, r4
 8000324:	d105      	bne.n	8000332 <__libc_init_array+0x2e>
 8000326:	bd70      	pop	{r4, r5, r6, pc}
 8000328:	f855 3b04 	ldr.w	r3, [r5], #4
 800032c:	4798      	blx	r3
 800032e:	3601      	adds	r6, #1
 8000330:	e7ee      	b.n	8000310 <__libc_init_array+0xc>
 8000332:	f855 3b04 	ldr.w	r3, [r5], #4
 8000336:	4798      	blx	r3
 8000338:	3601      	adds	r6, #1
 800033a:	e7f2      	b.n	8000322 <__libc_init_array+0x1e>
 800033c:	08000364 	.word	0x08000364
 8000340:	08000364 	.word	0x08000364
 8000344:	08000364 	.word	0x08000364
 8000348:	08000368 	.word	0x08000368

0800034c <_init>:
 800034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034e:	bf00      	nop
 8000350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000352:	bc08      	pop	{r3}
 8000354:	469e      	mov	lr, r3
 8000356:	4770      	bx	lr

08000358 <_fini>:
 8000358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035a:	bf00      	nop
 800035c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035e:	bc08      	pop	{r3}
 8000360:	469e      	mov	lr, r3
 8000362:	4770      	bx	lr
